package com.me.ngawwh;

import com.badlogic.gdx.ApplicationListener;
import com.badlogic.gdx.Game;
import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.Application.ApplicationType;
import com.badlogic.gdx.Input.Keys;
import com.badlogic.gdx.InputProcessor;
import com.badlogic.gdx.graphics.GL10;
import com.badlogic.gdx.graphics.OrthographicCamera;
import com.badlogic.gdx.graphics.Texture;
import com.badlogic.gdx.graphics.Texture.TextureFilter;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;
import com.badlogic.gdx.math.Vector3;

public class MainGame extends Game implements InputProcessor {
	private StartGamePage inicio;
	private MainGamePage principal;
	private MapGamePage mapas;
	private CharGamePage informacion;
	private QuestGamePage quest;
	private MiniGamePage minig;
	private InvGamePage invent;
	private ConfGamePage config;
	private StylistGamePage stylist;
	private QuestSelGamePage questsel;
	private OrthographicCamera camera;
	
	@Override
	public void create() {
		camera = new OrthographicCamera(Gdx.graphics.getWidth(),Gdx.graphics.getHeight());
		camera.setToOrtho(false, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
		Gdx.input.setInputProcessor(this);
        Gdx.input.setCatchBackKey(true);
        inicio = new StartGamePage(this,camera);
		principal = new MainGamePage(this,camera);
		mapas = new MapGamePage(this,camera);
		informacion = new CharGamePage(this,camera);
		quest = new QuestGamePage(this,camera);
		minig = new MiniGamePage(this,camera);
		invent = new InvGamePage(this,camera);
		config = new ConfGamePage(this,camera);
		stylist = new StylistGamePage(this,camera);
		questsel = new QuestSelGamePage(this,camera);
		/*
		textureStylist = new Texture(Gdx.files.internal("data/backgroundstilyst.png"));
		textureStylist.setFilter(TextureFilter.Linear, TextureFilter.Linear);
		textureSelectQuest = new Texture(Gdx.files.internal("data/backgroundquestinfo.png"));
		textureSelectQuest.setFilter(TextureFilter.Linear, TextureFilter.Linear);
		
		*/
		setScreen(inicio);
	}
	
	public void cambiarScreens(int i){
		switch(i){
		case 0: try{this.wait(500);}catch(Exception e){} setScreen(principal); break;
		case 1: try{this.wait(500);}catch(Exception e){} setScreen(informacion); break;
		case 2: try{this.wait(500);}catch(Exception e){} setScreen(mapas); break;
		case 3: try{this.wait(500);}catch(Exception e){} setScreen(quest); break;
		case 4: try{this.wait(500);}catch(Exception e){} setScreen(minig); break;
		case 5: try{this.wait(500);}catch(Exception e){} setScreen(invent); break;
		case 6: try{this.wait(500);}catch(Exception e){} setScreen(config); break;
		case 7: try{this.wait(500);}catch(Exception e){} setScreen(stylist); break;
		case 8: try{this.wait(500);}catch(Exception e){} setScreen(questsel); break;
		}
	}

	@Override
	public void dispose() {
		super.dispose();
	}

	@Override
	public void render() {
		super.render();
	}

	@Override
	public void resize(int width, int height) {
		super.resize(width, height);
	}

	@Override
	public void pause() {
		super.pause();
	}

	@Override
	public void resume() {
		super.resume();
	}

	@Override
	public boolean keyDown(int keycode) {
		if(Gdx.app.getType() == ApplicationType.Android){
			if(this.getScreen().hashCode() != principal.hashCode() && this.getScreen().hashCode() != inicio.hashCode() && this.getScreen().hashCode() != stylist.hashCode() && keycode == Keys.BACK){
				if(this.getScreen().hashCode() == questsel.hashCode() && keycode == Keys.BACK){
					setScreen(quest);
				}else{
					setScreen(principal);
				}
			}else{
					setScreen(inicio);
				//Gdx.input.setCatchBackKey(false);
			}
		}else{
			if(this.getScreen().hashCode() != principal.hashCode() && this.getScreen().hashCode() != inicio.hashCode() && this.getScreen().hashCode() != stylist.hashCode() && keycode == Keys.BACKSPACE){
				if(this.getScreen().hashCode() == questsel.hashCode() && keycode == Keys.BACKSPACE){
					setScreen(quest);
				}else{
					setScreen(principal);
				}
			}else{
				setScreen(inicio);
				//Gdx.input.setCatchBackKey(false);
			}
		}
		return true;
	}

	@Override
	public boolean keyUp(int keycode) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean keyTyped(char character) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean touchDown(int screenX, int screenY, int pointer, int button){
		
		return false;
	}

	@Override
	public boolean touchUp(int screenX, int screenY, int pointer, int button) {
		Vector3 posicion = new Vector3(screenX, screenY, 0);
		camera.unproject(posicion);
		if(this.getScreen().hashCode() == principal.hashCode()){
			int puls = principal.botonPulsado(posicion.x,posicion.y);
			if(puls!=-1){
				this.cambiarScreens(puls);
			}
		}
		return true;
	}

	@Override
	public boolean touchDragged(int screenX, int screenY, int pointer) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean mouseMoved(int screenX, int screenY) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean scrolled(int amount) {
		// TODO Auto-generated method stub
		return false;
	}
}
