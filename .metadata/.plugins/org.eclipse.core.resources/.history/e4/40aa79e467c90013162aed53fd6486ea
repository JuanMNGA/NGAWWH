package com.me.ngawwh;

import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.Screen;
import com.badlogic.gdx.graphics.GL10;
import com.badlogic.gdx.graphics.OrthographicCamera;
import com.badlogic.gdx.graphics.Texture;
import com.badlogic.gdx.graphics.Texture.TextureFilter;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;
import com.badlogic.gdx.math.Rectangle;
import com.badlogic.gdx.math.Vector3;

public class StartGamePage implements Screen{
	
	private OrthographicCamera camera;
	private Texture textureStartGame;
	private Texture textureNew;
	private Texture textureCont;
	private Texture textureExit;
	private SpriteBatch b;
	private MainGame MG;
	private float pos1x, pos1y, pos2x, pos2y, pos3x, pos3y, tamx, tamy;
	private Rectangle r_New, r_Cont, r_Exit;
	
	public StartGamePage(MainGame mg, OrthographicCamera camera){
		this.camera = camera;
		camera.update();
		b = new SpriteBatch(Gdx.graphics.getWidth(),Gdx.graphics.getHeight());
		b.setProjectionMatrix(camera.combined);
		textureStartGame = new Texture(Gdx.files.internal("data/backgroundInicio.png"));
		textureStartGame.setFilter(TextureFilter.Linear, TextureFilter.Linear);
		textureNew = new Texture(Gdx.files.internal("data/BotonesInicio.png"));
		textureNew.setFilter(TextureFilter.Linear, TextureFilter.Linear);
		textureCont = new Texture(Gdx.files.internal("data/BotonesInicio.png"));
		textureCont.setFilter(TextureFilter.Linear, TextureFilter.Linear);
		textureExit = new Texture(Gdx.files.internal("data/BotonesInicio.png"));
		textureExit.setFilter(TextureFilter.Linear, TextureFilter.Linear);
		pos1x = Gdx.graphics.getWidth()*(0.1125f);
		pos2x = Gdx.graphics.getWidth()*(0.375f);
		pos3x = Gdx.graphics.getWidth()*(0.6375f);
		pos1y = pos2y = pos3y = Gdx.graphics.getHeight()*(0.125f);
		tamx = Gdx.graphics.getWidth()*(0.25f);
		tamy = Gdx.graphics.getHeight()*(0.25f);
		r_New = new Rectangle(pos1x,pos1y,tamx,tamy);
		r_Cont = new Rectangle(pos2x,pos2y,tamx,tamy);
		r_Exit = new Rectangle(pos3x,pos3y,tamx,tamy);
	}

	@Override
	public void render(float delta) {
		if(Gdx.input.isTouched()){
			Vector3 posicion = new Vector3(Gdx.input.getX(),Gdx.input.getY(),0);
			camera.unproject(posicion);
			if(r_New.contains(posicion.x,posicion.y)){
				
			}
			if(r_Cont.contains(posicion.x,posicion.y)){
				
			}
			if(r_Exit.contains(posicion.x,posicion.y)){
				
			}
		}
		Gdx.gl.glClearColor(0, 0, 0, 1); //Gdx es una clase con la que podemos acceder a variables que hacen referencia a todos los subsitemas, como son graficos, audio, ficheros, entrada y aplicaciones
		// gl es una variable de tipo GL, nos permite acceder a metodos de GL10, GL11 y GL20
		//En este caso glClearColor es un bucle (game loop) que establecera el fondo de la pantalla negro (0,0,0) con transparencia 1
		Gdx.gl.glClear(GL10.GL_COLOR_BUFFER_BIT);
		b.begin();
		b.draw(textureStartGame,0,0,Gdx.graphics.getWidth(),Gdx.graphics.getHeight());
		b.draw(textureNew, pos1x, pos1y, tamx, tamy);
		b.draw(textureCont, pos2x, pos2y, tamx, tamy);
		b.draw(textureExit, pos3x, pos3y, tamx, tamy);
		b.end();
		
	}

	@Override
	public void resize(int width, int height) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void show() {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void hide() {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void pause() {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void resume() {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void dispose() {
		// TODO Auto-generated method stub
		
	}

}
